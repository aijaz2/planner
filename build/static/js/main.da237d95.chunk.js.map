{"version":3,"sources":["components/Task/Task.js","components/Card/Objective.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","className","task","title","specific","measurable","achievable","relevant","status","Objective","objective","map","key","id","onClick","delete","App","useState","objectives","setObjectives","deleteObjective","old","filter","index","newObjective","Object","keys","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSA4BeA,MAzBf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aACVD,EAAME,KAAKC,OAEhB,yBAAKF,UAAU,YAAf,aACeD,EAAME,KAAKE,UAE1B,yBAAKH,UAAU,cAAf,eACiBD,EAAME,KAAKG,YAE5B,yBAAKJ,UAAU,cAAf,eACiBD,EAAME,KAAKI,YAE5B,yBAAKL,UAAU,YAAf,aACeD,EAAME,KAAKK,UAE1B,yBAAKN,UAAU,UAAf,WACaD,EAAME,KAAKM,UCLrBC,MAbf,SAAmBT,GACf,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,SACVD,EAAMU,UAAUP,OAEpBH,EAAMU,UAAUR,KAAKS,KAAI,SAAAT,GAAI,OAC1B,kBAAC,EAAD,CAAMU,IAAKV,EAAKW,GAAIX,KAAMA,OAC9B,4BAAQY,QAAS,kBAAKd,EAAMe,OAAOf,EAAMU,UAAUG,MAAnD,uBC+FGG,MAtGf,WAAgB,IAAD,EACyBC,mBAAS,CACrC,CACI,MAAS,cACT,GAAM,EACN,KAAQ,CACJ,CACI,GAAM,EACN,MAAS,QACT,SAAY,SACZ,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,OAEd,CACI,GAAM,EACN,MAAS,QACT,SAAY,SACZ,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,SAItB,CACI,MAAS,cACT,GAAM,EACN,KAAQ,CACJ,CACI,GAAM,EACN,MAAS,SACT,SAAY,SACZ,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,OAEd,CACI,GAAM,EACN,MAAS,SACT,SAAY,SACZ,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,WA9CnB,mBACJC,EADI,KACQC,EADR,KA+ELC,EAAkB,SAACP,GACrB,IAAIQ,EAAOH,EAAWI,QAAO,SAAAZ,GAAS,OAAIA,EAAUG,KAAOA,KAC3DM,EAAcE,IAGlB,OACI,6BACI,yBAAKpB,UAAU,WACViB,EAAWP,KAAI,SAACD,EAAWa,GACxB,OACI,6BACI,kBAAC,EAAD,CAAWR,OAAQK,EAAiBR,IAAKW,EAAOb,UAAWA,SAK3E,6BACI,4BAAQI,QA3CC,WACjB,IAAMU,EAAe,CACjB,MAAS,aAAaC,OAAOC,KAAKR,GAAYS,OAC9C,GAAMF,OAAOC,KAAKR,GAAYS,OAAO,EACrC,KAAQ,CAAC,CACL,GAAM,EACN,MAAS,QACT,SAAY,SACZ,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,OACX,CACC,GAAM,EACN,MAAS,QACT,SAAY,SACZ,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,SAGdN,EAAG,sBAAOH,GAAP,CAAmBM,IAC1BL,EAAcE,KAoBN,qBCzFIO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da237d95.chunk.js","sourcesContent":["import React from 'react';\nimport '../../styling/Task.css';\n\nfunction Task(props) {\n    return (\n        <div className=\"Task\">\n            <div className=\"TaskTitle\">\n                {props.task.title}\n            </div>\n            <div className=\"Specific\">\n                Specific: {props.task.specific}\n            </div>\n            <div className=\"Measurable\">\n                Measurable: {props.task.measurable}\n            </div>\n            <div className=\"Achievable\">\n                Achievable: {props.task.achievable}\n            </div>\n            <div className=\"Relevant\">\n                Relevant: {props.task.relevant}\n            </div>\n            <div className=\"Status\">\n                Status: {props.task.status}\n            </div>\n        </div>\n    );\n}\n\nexport default Task;\n","import React from 'react';\nimport '../../styling/Objective.css';\nimport Task from \"../../components/Task/Task.js\"\n\nfunction Objective(props) {\n    return (\n        <div className=\"Objective\">\n            <div className=\"Title\">\n                {props.objective.title}\n            </div>\n            {props.objective.task.map(task =>\n                <Task key={task.id} task={task} />)}\n            <button onClick={() =>props.delete(props.objective.id)}>Delete objective!</button>\n        </div>\n    );\n}\n\nexport default Objective;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Objective from \"./components/Card/Objective.js\";\n\n\nfunction App() {\n    const [objectives, setObjectives] = useState([\n            {\n                \"title\": \"Objective 0\",\n                \"id\": 0,\n                \"task\": [\n                    {\n                        \"id\": 3,\n                        \"title\": \"task1\",\n                        \"specific\": \"sasdad\",\n                        \"measurable\": \"ad\",\n                        \"achievable\": \"ads\",\n                        \"relevant\": \"asd\",\n                        \"status\": \"asd\"\n                    },\n                    {\n                        \"id\": 4,\n                        \"title\": \"task2\",\n                        \"specific\": \"sasdad\",\n                        \"measurable\": \"ad\",\n                        \"achievable\": \"ads\",\n                        \"relevant\": \"asd\",\n                        \"status\": \"asd\"\n                    }\n                ]\n            },\n            {\n                \"title\": \"Objective 1\",\n                \"id\": 1,\n                \"task\": [\n                    {\n                        \"id\": 5,\n                        \"title\": \"task12\",\n                        \"specific\": \"sasdad\",\n                        \"measurable\": \"ad\",\n                        \"achievable\": \"ads\",\n                        \"relevant\": \"asd\",\n                        \"status\": \"asd\"\n                    },\n                    {\n                        \"id\": 6,\n                        \"title\": \"task22\",\n                        \"specific\": \"sasdad\",\n                        \"measurable\": \"ad\",\n                        \"achievable\": \"ads\",\n                        \"relevant\": \"asd\",\n                        \"status\": \"asd\"\n                    }\n                ]\n            }]\n\n    )\n\n    const addObjective = () => {\n        const newObjective = {\n            \"title\": \"Objective \"+Object.keys(objectives).length,\n            \"id\": Object.keys(objectives).length+1,\n            \"task\": [{\n                \"id\": 5,\n                \"title\": \"task1\",\n                \"specific\": \"sasdad\",\n                \"measurable\": \"ad\",\n                \"achievable\": \"ads\",\n                \"relevant\": \"asd\",\n                \"status\": \"asd\"\n            }, {\n                \"id\": 4,\n                \"title\": \"task2\",\n                \"specific\": \"sasdad\",\n                \"measurable\": \"ad\",\n                \"achievable\": \"ads\",\n                \"relevant\": \"asd\",\n                \"status\": \"asd\"\n            }]\n        }\n        let old = [...objectives, newObjective];\n        setObjectives(old);\n    };\n\n    const deleteObjective = (id) => {\n        let old  = objectives.filter(objective => objective.id !== id);\n        setObjectives(old);\n    };\n\n    return (\n        <div>\n            <div className=\"content\">\n                {objectives.map((objective, index) => {\n                    return (\n                        <div>\n                            <Objective delete={deleteObjective} key={index} objective={objective}/>\n                        </div>\n                )\n                })}\n            </div>\n            <div>\n                <button onClick={addObjective}>Add objective!</button>\n            </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}