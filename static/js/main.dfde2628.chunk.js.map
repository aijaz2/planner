{"version":3,"sources":["components/Task/Specific.js","components/Task/SpecificForm.js","components/Task/Task.js","components/Objective/Objective.js","App.js","serviceWorker.js","index.js"],"names":["Specific","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","SpecificForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","Task","task","removeTask","specific","specifics","setSpecifics","newSpecifics","splice","title","map","key","measurable","achievable","relevant","status","Objective","objective","deleteObjective","tasks","setTasks","newTasks","length","console","log","addTask","id","App","uuidv4","require","data","objectives","setObjectives","old","filter","newObjective","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oPAmBeA,MAhBf,YAA8D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAE3C,OACI,yBACIC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,KAE5DP,EAAKQ,KAEN,6BACI,4BAAQJ,UAAU,cAAcK,QAAS,kBAAMP,EAAaD,KAA5D,UACA,4BAAQG,UAAU,YAAYK,QAAS,kBAAMN,EAAWF,KAAxD,aCSAS,MArBhB,YAAoC,IAAZC,EAAW,EAAXA,QAAW,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAU/B,OACI,0BAAMC,SARW,SAAAC,GACjBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKL,2BACII,KAAK,OACLd,UAAU,QACVS,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,YC2ClCQ,MAzDf,YAA0C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,WAAYtB,EAAQ,EAARA,MAAQ,EAEHW,mBAASU,EAAKE,UAFX,mBAE9BC,EAF8B,KAEnBC,EAFmB,KAQ/BxB,EAAe,SAAAD,GACjB,IAAM0B,EAAY,YAAOF,GACzBE,EAAa1B,GAAOM,aAAeoB,EAAa1B,GAAOM,YACvDmB,EAAaC,IAGXxB,EAAa,SAAAF,GACf,IAAM0B,EAAY,YAAOF,GACzBE,EAAaC,OAAO3B,EAAO,GAC3ByB,EAAaC,IAGjB,OACI,yBAAKvB,UAAU,QACX,yBAAKA,UAAU,aACVkB,EAAKO,OAEV,yBAAKzB,UAAU,YAAf,YAEI,yBAAKA,UAAU,aACVqB,EAAUK,KAAI,SAACN,EAAUvB,GAAX,OACX,kBAAC,EAAD,CACI8B,IAAK9B,EACLA,MAAOA,EACPD,KAAMwB,EACNtB,aAAcA,EACdC,WAAYA,OAGpB,kBAAC,EAAD,CAAcQ,QAlCd,SAAAH,GACZ,IAAMmB,EAAY,sBAAOF,GAAP,CAAkB,CAAEjB,UACtCkB,EAAaC,QAmCT,yBAAKvB,UAAU,YAAf,eACiBkB,EAAKU,YAEtB,yBAAK5B,UAAU,YAAf,eACiBkB,EAAKW,YAEtB,yBAAK7B,UAAU,YAAf,aACekB,EAAKY,UAEpB,yBAAK9B,UAAU,YAAf,WACakB,EAAKa,QAElB,4BAAQ/B,UAAU,YAAYK,QAAS,kBAAMc,EAAWtB,KAAxD,iBCdGmC,MAtCf,YAAkD,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,gBAAkB,EACnB1B,mBAASyB,EAAUf,MADA,mBACtCiB,EADsC,KAC/BC,EAD+B,KAGvCjB,EAAa,SAAAtB,GACf,IAAMwC,EAAQ,YAAOF,GACrBE,EAASb,OAAO3B,EAAO,GACvBuC,EAASC,IAkBb,OACI,yBAAKrC,UAAU,aACX,yBAAKA,UAAU,SACViC,EAAUR,MADf,gBAEkBU,EAAMG,QAEvBH,EAAMT,KAAI,SAACR,EAAMrB,GAAP,OACP,kBAAC,EAAD,CAAMsB,WAAYA,EAAYtB,MAAOA,EAAO8B,IAAK9B,EAAOqB,KAAMA,OAClE,4BAAQb,QAAS,kBAvBT,WACZ,IASIgC,EAAQ,sBAAOF,GAAP,CATG,CACX,GAAM,EACN,MAAS,SACT,SAAY,CAAC,CAAC,GAAK,GAAI,KAAO,UAAU,CAAC,GAAK,GAAI,KAAO,WACzD,WAAc,KACd,WAAc,MACd,SAAY,MACZ,OAAU,SAGdI,QAAQC,IAAIL,GACZC,EAASC,GACTE,QAAQC,IAAIL,GAUcM,CAAQR,EAAUS,MAAxC,YACA,4BAAQrC,QAAS,kBAAK6B,EAAgBD,EAAUS,MAAhD,sB,OCsBGC,MAtDf,WACI,IAAMC,EAASC,EAAQ,IADZ,EAGyBrC,mBAASsC,GAHlC,mBAGJC,EAHI,KAGQC,EAHR,KA+BLd,EAAkB,SAACQ,GACrB,IAAIO,EAAMF,EAAWG,QAAO,SAAAjB,GAAS,OAAIA,EAAUS,KAAOA,KAC1DM,EAAcC,IAGlB,OACI,6BACI,yBAAKjD,UAAU,WACV+C,EAAWrB,KAAI,SAACO,EAAWpC,GACxB,OACI,6BACI,kBAAC,EAAD,CAAWqC,gBAAiBA,EAAiBP,IAAK9B,EAAOoC,UAAWA,SAKpF,6BACI,4BAAQ5B,QA3CC,WACjB,IAAM8C,EAAe,CACjB,MAAS,aAAeC,OAAOC,KAAKN,GAAYT,OAChD,GAAMM,IACN,KAAQ,CAAC,CACL,GAAMA,IACN,MAAS,QACT,SAAY,GACZ,WAAc,GACd,WAAc,GACd,SAAY,GACZ,OAAU,IACX,CACC,GAAMA,IACN,MAAS,QACT,SAAY,GACZ,WAAc,GACd,WAAc,GACd,SAAY,GACZ,OAAU,MAGdK,EAAG,sBAAOF,GAAP,CAAmBI,IAC1BH,EAAcC,KAoBN,qBCzCIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.dfde2628.chunk.js","sourcesContent":["import React from \"react\";\nimport '../../styling/Task.css';\n\nfunction Specific({ todo, index, completeTodo, removeTodo }) {\n\n    return (\n        <div\n            className=\"todo\"\n            style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n        >\n            {todo.text}\n\n            <div>\n                <button className=\"ButtonGreen\" onClick={() => completeTodo(index)}>&#x2713;</button>\n                <button className=\"ButtonRed\" onClick={() => removeTodo(index)}>&#x2717;</button>\n            </div>\n        </div>\n    );\n}\nexport default Specific;","import React, {useState} from \"react\";\n\nfunction SpecificForm({ addTodo }) {\n    const [value, setValue] = useState(\"\");\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!value) return;\n        addTodo(value);\n        setValue(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                className=\"input\"\n                value={value}\n                onChange={e => setValue(e.target.value)}\n            />\n        </form>\n    );\n}\nexport default  SpecificForm;","import React, {useState} from 'react';\nimport '../../styling/Task.css';\nimport Specific from \"./Specific\";\nimport SpecificForm from \"./SpecificForm\";\nfunction Task({task, removeTask, index}) {\n\n    const [specifics, setSpecifics] = useState(task.specific);\n    const addTodo = text => {\n        const newSpecifics = [...specifics, { text }];\n        setSpecifics(newSpecifics);\n    };\n\n    const completeTodo = index => {\n        const newSpecifics = [...specifics];\n        newSpecifics[index].isCompleted = !newSpecifics[index].isCompleted;\n        setSpecifics(newSpecifics);\n    };\n\n    const removeTodo = index => {\n        const newSpecifics = [...specifics];\n        newSpecifics.splice(index, 1);\n        setSpecifics(newSpecifics);\n    };\n\n    return (\n        <div className=\"Task\">\n            <div className=\"TaskTitle\">\n                {task.title}\n            </div>\n            <div className=\"Specific\">\n                Specific:\n                <div className=\"todo-list\">\n                    {specifics.map((specific, index) => (\n                        <Specific\n                            key={index}\n                            index={index}\n                            todo={specific}\n                            completeTodo={completeTodo}\n                            removeTodo={removeTodo}\n                        />\n                    ))}\n                    <SpecificForm addTodo={addTodo} />\n                </div>\n            </div>\n            <div className=\"Specific\">\n                Measurable: {task.measurable}\n            </div>\n            <div className=\"Specific\">\n                Achievable: {task.achievable}\n            </div>\n            <div className=\"Specific\">\n                Relevant: {task.relevant}\n            </div>\n            <div className=\"Specific\">\n                Status: {task.status}\n            </div>\n            <button className=\"ButtonRed\" onClick={() => removeTask(index)}>Delete task</button>\n        </div>\n    );\n}\n\nexport default Task;\n","import React, {useState} from 'react';\nimport '../../styling/Objective.css';\nimport Task from \"../../components/Task/Task.js\"\n\nfunction Objective({objective, deleteObjective}) {\n    const [tasks, setTasks] = useState(objective.task);\n\n    const removeTask = index => {\n        const newTasks = [...tasks];\n        newTasks.splice(index, 1);\n        setTasks(newTasks);\n    };\n\n    const addTask = () => {\n        const tempTask={\n            \"id\": 5,\n            \"title\": \"task12\",\n            \"specific\": [{\"id\":32, \"text\":\"todo 1\"},{\"id\":22, \"text\":\"todo 2\"}],\n            \"measurable\": \"ad\",\n            \"achievable\": \"ads\",\n            \"relevant\": \"asd\",\n            \"status\": \"asd\"\n        }\n        let newTasks = [...tasks,  tempTask ];\n        console.log(tasks);\n        setTasks(newTasks);\n        console.log(tasks);\n    };\n    return (\n        <div className=\"Objective\">\n            <div className=\"Title\">\n                {objective.title}\n                Total tasks: {tasks.length}\n            </div>\n            {tasks.map((task, index) =>\n                <Task removeTask={removeTask} index={index} key={index} task={task} />)}\n            <button onClick={() =>addTask(objective.id)}>Add Task</button>\n            <button onClick={() =>deleteObjective(objective.id)}>Delete objective</button>\n        </div>\n    );\n}\n\nexport default Objective;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Objective from \"./components/Objective/Objective.js\";\nimport data from \"./data\";\n\nfunction App() {\n    const uuidv4 = require(\"uuid/v4\")\n\n    const [objectives, setObjectives] = useState(data);\n\n    const addObjective = () => {\n        const newObjective = {\n            \"title\": \"Objective \" + Object.keys(objectives).length,\n            \"id\": uuidv4(),\n            \"task\": [{\n                \"id\": uuidv4(),\n                \"title\": \"task1\",\n                \"specific\": [],\n                \"measurable\": \"\",\n                \"achievable\": \"\",\n                \"relevant\": \"\",\n                \"status\": \"\"\n            }, {\n                \"id\": uuidv4(),\n                \"title\": \"task2\",\n                \"specific\": [],\n                \"measurable\": \"\",\n                \"achievable\": \"\",\n                \"relevant\": \"\",\n                \"status\": \"\"\n            }]\n        }\n        let old = [...objectives, newObjective];\n        setObjectives(old);\n    };\n\n    const deleteObjective = (id) => {\n        let old = objectives.filter(objective => objective.id !== id);\n        setObjectives(old);\n    };\n\n    return (\n        <div>\n            <div className=\"content\">\n                {objectives.map((objective, index) => {\n                    return (\n                        <div>\n                            <Objective deleteObjective={deleteObjective} key={index} objective={objective}/>\n                        </div>\n                    )\n                })}\n            </div>\n            <div>\n                <button onClick={addObjective}>Add objective!</button>\n            </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}