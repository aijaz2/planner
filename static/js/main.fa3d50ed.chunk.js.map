{"version":3,"sources":["components/Task/Specific.js","components/Task/Task.js","components/Objective/Objective.js","App.js","serviceWorker.js","index.js"],"names":["Specific","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","Task","task","removeTask","key","useState","specific","specifics","setSpecifics","setTodo","newSpecifics","splice","id","title","map","onSubmit","e","preventDefault","addTodo","placeholder","type","value","onChange","target","measurable","achievable","relevant","status","Objective","objective","deleteObjective","uuidv4","require","tasks","setTasks","newTasks","filter","tempTask","addTask","App","data","objectives","setObjectives","newObjectives","newObjective","old","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa3d50ed.chunk.js","sourcesContent":["import React from \"react\";\nimport '../../styling/Task.css';\n\nfunction Specific({ todo, index, completeTodo, removeTodo }) {\n\n    return (\n        <div className=\"todo\" style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}>\n            {todo.text}\n            <div>\n                <button className=\"ButtonGreen\" onClick={() => completeTodo(index)}>&#x2713;</button>\n                <button className=\"ButtonRed\" onClick={() => removeTodo(index)}>&#x2717;</button>\n            </div>\n        </div>\n    );\n}\nexport default Specific;","import React, {useState} from 'react';\nimport '../../styling/Task.css';\nimport Specific from \"./Specific\";\n\nfunction Task({task, removeTask, key}) {\n\n    const [specifics, setSpecifics] = useState(task.specific);\n    const [todo, setTodo] = useState(\"\");\n\n    const completeTodo = index => {\n        const newSpecifics = [...specifics];\n        newSpecifics[index].isCompleted = !newSpecifics[index].isCompleted;\n        setSpecifics(newSpecifics);\n    };\n\n    const removeTodo = index => {\n        const newSpecifics = [...specifics];\n        newSpecifics.splice(index, 1);\n        setSpecifics(newSpecifics);\n    };\n\n    const addTodo = text => {\n        const newSpecifics = [...specifics, { text }];\n        setSpecifics(newSpecifics);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!todo) return;\n        addTodo(todo);\n        setTodo(\"\");\n    };\n\n    return (\n        <div className=\"Task\">\n            <div><button onClick={() => removeTask(task.id)}>Delete task</button></div>\n            <div className=\"TaskTitle\">\n                {task.title} <br/>\n                id: {task.id}\n            </div>\n            <div className=\"Specific\">\n                Todo:\n                <div className=\"todo-list\">\n                    {specifics.map((specific, index) => (\n                        <Specific\n                            key={index}\n                            index={index}\n                            todo={specific}\n                            completeTodo={completeTodo}\n                            removeTodo={removeTodo}\n                        />\n                    ))}\n                    <form onSubmit={handleSubmit}>\n                        <input\n                            placeholder=\"Input text and press enterâ€¦\"\n                            type=\"text\"\n                            className=\"input\"\n                            value={todo}\n                            onChange={e => setTodo(e.target.value)}\n                        />\n                    </form>\n                </div>\n            </div>\n            <div className=\"Specific\">\n                Measurable: {task.measurable}\n            </div>\n            <div className=\"Specific\">\n                Achievable: {task.achievable}\n            </div>\n            <div className=\"Specific\">\n                Relevant: {task.relevant}\n            </div>\n            <div className=\"Specific\">\n                Status: {task.status}\n            </div>\n        </div>\n    );\n}\n\nexport default Task;\n","import React, {useState} from 'react';\nimport '../../styling/Objective.css';\nimport Task from \"../../components/Task/Task.js\"\n\nfunction Objective({objective, deleteObjective, index, key}) {\n    const uuidv4 = require(\"uuid/v4\");\n    const [tasks, setTasks] = useState(objective.task);\n\n    const removeTask = id => {\n        let newTasks= [...tasks];\n        newTasks=newTasks.filter(task => task.id !== id);\n        setTasks(newTasks);\n    };\n\n    const addTask = () => {\n        const tempTask={\n            \"id\": uuidv4(),\n            \"title\": \"The title\",\n            \"specific\": [],\n            \"measurable\": \"some text...\",\n            \"achievable\": \"some text...\",\n            \"relevant\": \"some text...\",\n            \"status\": \"some text...\"\n        }\n        let newTasks = [...tasks,  tempTask ];\n        setTasks(newTasks);\n    };\n\n    return (\n        <div className=\"Objective\">\n            <div className=\"Title\">\n                {objective.title}<br/>\n                id: {objective.id}\n            </div>\n            {tasks.map((task, index) =>\n                <Task removeTask={removeTask} index={index} key={task.id} task={task} />)}\n            <button onClick={() =>addTask(index)}>Add Task</button>\n            <button onClick={() =>deleteObjective(objective.id)}>Delete objective</button>\n        </div>\n    );\n}\n\nexport default Objective;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Objective from \"./components/Objective/Objective.js\";\nimport data from \"./data\";\n\nfunction App() {\n    const uuidv4 = require(\"uuid/v4\")\n\n    const [objectives, setObjectives] = useState(data);\n\n    const addObjective = () => {\n        const newObjective = {\n            \"title\": \"Objective \",\n            \"id\": uuidv4(),\n            \"task\": []\n        }\n        let old = [...objectives, newObjective];\n        setObjectives(old);\n    };\n\n    const deleteObjective = id => {\n        let newObjectives= [...objectives];\n        newObjectives=newObjectives.filter(objective => objective.id !== id);\n        setObjectives(newObjectives);\n    };\n    return (\n        <div>\n\n                <button onClick={addObjective}>Add objective!</button>\n\n            <div className=\"content\">\n                {objectives.map((objective, index) => {\n                    return (\n                        <div>\n                            <Objective deleteObjective={deleteObjective} index={index} key={objective.id} objective={objective}/>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}